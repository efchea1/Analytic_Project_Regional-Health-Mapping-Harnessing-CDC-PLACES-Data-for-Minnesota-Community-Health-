[{"name":"app.R","content":"# Shiny Dashboard -------------------------------------------------------------\r\n\r\n# Load necessary libraries for the application\r\nlibrary(shiny)            # shiny package for building interactive web applications\r\nlibrary(ggplot2)          # ggplot2 package for creating graphics\r\nlibrary(dplyr)            # dplyr package for data manipulation\r\nlibrary(shinydashboard)   # shinydashboard package for creating dashboards\r\nlibrary(shinyjs)          # shinyjs package for adding JavaScript functionality\r\nlibrary(tidyr)            # tidyr package for tidying and handling missing values\r\n\r\n# Load Data from GitHub -------------------------------------------------------\r\n# Read census estimate data for Minnesota from a CSV file hosted on GitHub\r\nCensusEstMN <- read.csv('https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/CDC%20Places/2020%20to%202022%20Pop.%20Estimates/cc-est2022-agesex.csv')\r\n\r\n# List of URLs from GitHub for Coronary Heart Disease (CHD) data CSV files from 2018 to 2021\r\nCHD_files <- list(\r\n  'https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/CDC%20Places/Places%20CDC%20Estimates/CHD/CHD2018.csv',\r\n  'https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/CDC%20Places/Places%20CDC%20Estimates/CHD/CHD2019.csv',\r\n  'https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/CDC%20Places/Places%20CDC%20Estimates/CHD/CHD2020.csv',\r\n  'https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/CDC%20Places/Places%20CDC%20Estimates/CHD/CHD2021.csv'\r\n)\r\n\r\n# Reading each CHD data file into a list of data frames\r\nCHD_data <- lapply(CHD_files, read.csv)\r\n\r\n# Read Community Health Board (CHB) data from a CSV file from GitHub\r\nchb_raw <- read.csv('https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/MN%20SCHSAC%20%26%20CHB%20Regions/Community%20Health%20Board%20as%20of%201_17_2024.csv')\r\n\r\n# Read Minnesota region data from a CSV file from GitHub\r\nmn_region_raw <- read.csv('https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/MN%20SCHSAC%20%26%20CHB%20Regions/State%20Community%20Health%20Services%20Advisory%20Committee%20as%20of%201_17_2024.csv')\r\n\r\n# Data Wrangling --------------------------------------------------------------\r\n# Clean and merge CHD data\r\nCHD_data <- lapply(CHD_data, function(df) {\r\n  df$LocationID <- ifelse(\"Latitude\" %in% colnames(df), as.character(df$Latitude), NA) # Add LocationID if the Latitude column exists\r\n  colnames(df)[colnames(df) == 'Geolocatioin'] <- 'Geolocation' # Correct the spelling of Geolocation column if needed\r\n  df # Return the modified data frame\r\n})\r\n\r\n# Combine all cleaned CHD data frames into one data frame\r\nCHD_Final <- bind_rows(CHD_data) # Combine all cleaned CHD data frames into one data frame using bind_rows\r\n\r\n# Filter and select specific locations and data for the year 2021 in MN\r\nSelected_Locations <- CHD_Final |>\r\n  filter(Year == 2021, StateAbbr == \"MN\") |> # Filter CHD data for the year 2021 and state of Minnesota\r\n  left_join(mn_region_raw, by = c(\"LocationName\" = \"County\")) |> # Join with region data\r\n  left_join(chb_raw, by = c(\"LocationName\" = \"County\")) # Join with CHB data\r\n\r\n# Remove \"County\" from county names in census data\r\nCensusEstMN$CTYNAME <- gsub(\" County\", \"\", CensusEstMN$CTYNAME) # Remove \"County\" from county names in the census data\r\n\r\n# Population estimates for CHD in MN\r\nPopEst_CHDMN <- CensusEstMN |>\r\n  filter(YEAR == 3) |> # Filter census data for the year 2021\r\n  inner_join(Selected_Locations, by = c(\"CTYNAME\" = \"LocationName\")) |> # Join with selected CHD locations\r\n  select(CTYNAME, Data_Value_Type, AGE18PLUS_TOT, Measure, Data_Value, High_Confidence_Limit, Low_Confidence_Limit, Region, CHB) # Select relevant columns\r\n\r\n# Function to calculate aggregate values---------------------------------------\r\n# CDC PLACES methodology aggregate calculation here: https://www.cdc.gov/places/faqs/using-data/index.html\r\naggregate_values <- function(df, userInput, filterBy) {\r\n  df |>\r\n    filter(!!sym(filterBy) == userInput) |> # Filter by user input\r\n    mutate(\r\n      Aggregate_Data_Value = Data_Value * AGE18PLUS_TOT / 100, # Calculate aggregate data value\r\n      Aggregate_Low_Confidence_Limit = Low_Confidence_Limit * AGE18PLUS_TOT / 100, # Calculate aggregate low confidence limit\r\n      Aggregate_High_Confidence_Limit = High_Confidence_Limit * AGE18PLUS_TOT / 100 # Calculate aggregate high confidence limit\r\n    ) |>\r\n    group_by(across(all_of(filterBy)), Data_Value_Type) |> # Group by filter criteria and data value type\r\n    summarise(\r\n      Aggregate_Data_Value = sum(Aggregate_Data_Value) / sum(AGE18PLUS_TOT) * 100, # Summarise aggregate data value\r\n      Aggregate_Low_Confidence_Limit = sum(Aggregate_Low_Confidence_Limit) / sum(AGE18PLUS_TOT) * 100, # Summarise aggregate low confidence limit\r\n      Aggregate_High_Confidence_Limit = sum(Aggregate_High_Confidence_Limit) / sum(AGE18PLUS_TOT) * 100, # Summarise aggregate high confidence limit\r\n      .groups = 'drop' # Drop grouping\r\n    )\r\n}\r\n\r\n# Pre-calculate Minnesota total------------------------------------------------\r\nmn_total <- PopEst_CHDMN |>\r\n  mutate(StateAbbr = \"MN\") |> # Add state abbreviation\r\n  aggregate_values(\"MN\", 'StateAbbr') |> # Calculate the aggregate CHD data for the state of Minnesota\r\n  mutate(across(everything(), ~tidyr::replace_na(., 0))) # Handle NA values\r\n\r\n# Function to compute y-axis limits -------------------------------------------\r\ncompute_y_axis_limits <- function(data_list) {\r\n  min_value <- min(sapply(data_list, function(df) min(df$`Low Confidence Limit`, na.rm = TRUE))) # Find the minimum value across all data frames\r\n  max_value <- max(sapply(data_list, function(df) max(df$`High Confidence Limit`, na.rm = TRUE))) # Find the maximum value across all data frames\r\n  c(min_value, max_value) # Return the range of y-axis limits\r\n}\r\n\r\n# Function to create ggplot graph ---------------------------------------------\r\nchd_plot <- function(data, y_limits) {\r\n  ggplot(data, aes(x = `Data Type`, y = `Point Estimate`, color = `Data Type`)) +\r\n    geom_errorbar(aes(ymin = `Low Confidence Limit`, ymax = `High Confidence Limit`), width = 0.2) + # Add error bars\r\n    geom_point() + # Add points\r\n    ylim(y_limits) + # Set y-axis limits\r\n    theme_minimal() + # Use minimal theme\r\n    theme(\r\n      axis.title.y = element_blank(), # Remove y-axis title\r\n      axis.text.x = element_blank(),  # Remove x-axis text\r\n      axis.title.x = element_blank(), # Remove x-axis title\r\n      legend.text = element_text(size = 12) # Set legend text size\r\n    )\r\n}\r\n\r\n# Function to generate narrative text -----------------------------------------\r\ngenerate_narrative <- function(county_data, comparison_data, comparison_name, highlighted_year, highlighted_county, data_type) {\r\n  paste0(\r\n    \"In \", highlighted_year, \", <b>adults aged â‰¥18 years<\/b> in \", highlighted_county, \" had a <b>coronary heart disease<\/b> \",\r\n    data_type, \" of <b>\", round(county_data$`Point Estimate`, 2), \"% (95% CI: \", round(county_data$`Low Confidence Limit`, 2), \"-\",\r\n    round(county_data$`High Confidence Limit`, 2), \")<\/b>, compared to the \", comparison_name, \"'s <b>\",\r\n    round(comparison_data$`Point Estimate`, 2), \"% (95% CI: \", round(comparison_data$`Low Confidence Limit`, 2), \"-\",\r\n    round(comparison_data$`High Confidence Limit`, 2), \")<\/b>.\"\r\n  )\r\n}\r\n\r\n# Bookmarking Functionality ---------------------------------------------------\r\nenableBookmarking(store = \"url\") # Enable bookmarking with URL storage\r\n\r\n# Define UI -------------------------------------------------------------------\r\nui <- function(request) {\r\n  dashboardPage(\r\n    dashboardHeader(title = \"CDC Places to MN Regions\", titleWidth = 400), # Create dashboard header with title\r\n    dashboardSidebar(\r\n      width = 350,\r\n      div(style = \"margin-bottom: 10px;\", bookmarkButton(label = \"Bookmark\")), # Add bookmark button\r\n      selectInput(\"parGlobal_region\", label = \"Select SCHSAC Region of Interest\", choices = sort(unique(mn_region_raw$Region)), selected = NULL, width = 350), # Create dropdown for selecting SCHSAC region\r\n      selectInput(\"parGlobal_county\", label = \"Select County of Interest\", choices = sort(unique(mn_region_raw$County)), selected = NULL, width = 350), # Create dropdown for selecting county\r\n      selectInput(\"parLocal_chdYear\", label = \"Select Year\", choices = sort(unique(Selected_Locations$Year), decreasing = TRUE), selected = max(unique(Selected_Locations$Year)), width = 350), # Create dropdown for selecting year\r\n      selectInput(\"par_chdStateRegionChb\", label = \"Select Comparison\", choices = c(\"All\", \"State\", \"Region\", \"CHB\"), selected = \"All\", multiple = FALSE, width = 350), # Create dropdown for selecting comparison type\r\n      sidebarMenu(\r\n        menuItem(\"Home\", tabName = \"tn_homePage\"), # Create menu item for Home page\r\n        menuItem(\"Region & CHB Definition\", tabName = \"tn_regionChbDefinitions\"), # Create menu item for Region & CHB Definition\r\n        menuItem(\"Coronary Heart Disease\", tabName = \"tn_coronaryHeartDisease\") # Create menu item for Coronary Heart Disease\r\n      )\r\n    ),\r\n    dashboardBody(\r\n      shinyjs::useShinyjs(), # Enable shinyjs functionality\r\n      tabItems(\r\n        tabItem(\r\n          tabName = \"tn_homePage\",\r\n          tabsetPanel(\r\n            tabPanel(\r\n              \"Home Page\",\r\n              fluidRow(\r\n                column(\r\n                  width = 12,\r\n                  h1(\"Welcome to the CDC PLACES MN Region Dashboard\"), # Display welcome message\r\n                  h4(tags$b(\"Objective:\"), \"Use CDC PLACES methodology to create MN Regions ShinyLive dashboard for health indicators.\", tags$a(href=\"https://www.cdc.gov/places/faqs/using-data/index.htm\", \"Link to CDC PLACES methodology to calculate the aggregate values.\", target=\"_blank\")), # Link to external site\r\n                  tags$h4(tags$b(\"Why this project?\"),\"Before the CDC Places project, the CDC Behavioral Risk Factor Surveillance System BRFSS, allowed for state projected healthcare indicators. This process was not able to be applied to the county level. Now, with CDC Places counties can view some projected healthcare indicators. However, currently the CDC Places project does not show in an easy format aggregate county regions. By doing this project, I am not only going to help Quin County CHS, but other county regions in the state of Minnesota or even the United States.\"), # Description of the project\r\n                  tags$h3(\"Those involved with this project are:\"), # Project participants\r\n                  tags$h4(tags$b(\"Emmanuel Fle Chea\"), \", MPH, Public Health Data Science, University of Minnesota School of Public Health\"), # Participant 1\r\n                  tags$h4(tags$b(\"Mr. Patrick Olson\"), \" (Preceptor), Quin County Community Health Board, Community Resource Liaison/Associate/Researcher\") # Participant 2\r\n                )\r\n              )\r\n            )\r\n          )\r\n        ),\r\n        tabItem(\r\n          tabName = \"tn_regionChbDefinitions\",\r\n          fluidRow(\r\n            column(\r\n              width = 12,\r\n              tabsetPanel(\r\n                tabPanel(\r\n                  \"Region/CHB\",\r\n                  fluidRow(\r\n                    column(\r\n                      width = 12,\r\n                      h3(HTML(\"Updating the Select County of Interest filter will highlight the county in <font color=red>red<\/font> while the Regions and Community Health Boards will remain in <b>bold<\/b>.\")), # Explanation of functionality\r\n                      h3(\"For this tab, the Select SCHSAC Region and Select Community Health Board filters are greyed out because they do not execute any function on this tab.\"), # Note on disabled filters\r\n                      h3(\"The purpose for this tab is to provide a quick reference for what counties fall under which region and Community Health Board.\"), # Purpose of the tab\r\n                      tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\") # Horizontal rule for separation\r\n                    )\r\n                  ),\r\n                  fluidRow(\r\n                    column(6, uiOutput(\"region_narrative\", style = \"font-size: 20px;\")), # Region narrative output\r\n                    column(6, uiOutput(\"chb_narrative_01\", style = \"font-size: 20px;\")) # CHB narrative output\r\n                  ),\r\n                  fluidRow(\r\n                    column(\r\n                      width = 12,\r\n                      h3(\"Regions and Counties\"), # Regions and Counties heading\r\n                      uiOutput(\"region_counties\") # UI output for regions and counties list\r\n                    ),\r\n                    column(\r\n                      width = 12,\r\n                      h3(\"Community Health Boards\"), # Community Health Boards heading\r\n                      uiOutput(\"chb_counties\") # UI output for CHB and counties list\r\n                    )\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          )\r\n        ),\r\n        tabItem(\r\n          tabName = \"tn_coronaryHeartDisease\",\r\n          tabsetPanel(\r\n            id = \"tpId_coronaryHeartDisease\",\r\n            tabPanel(\r\n              \"Adults>=18 CHD Exposure\",\r\n              fluidRow(\r\n                column(\r\n                  width = 12,\r\n                  uiOutput(\"narrative_text\", style = \"font-size: 16px;\") # Display narrative text above the graphs\r\n                )\r\n              ),\r\n              fluidRow(\r\n                column(\r\n                  width = 6,\r\n                  box(\r\n                    title = uiOutput(\"selected_state_title\"), # State title output\r\n                    status = \"primary\", # Box status\r\n                    solidHeader = TRUE, # Solid header\r\n                    collapsible = TRUE, # Collapsible box\r\n                    width = NULL, # Full width\r\n                    plotOutput(\"plot_state\", height = \"200px\"), # State plot output\r\n                    tableOutput(\"table_state\") # State table output\r\n                  )\r\n                ),\r\n                column(\r\n                  width = 6,\r\n                  box(\r\n                    title = uiOutput(\"selected_region_title\"), # Region title output\r\n                    status = \"primary\", # Box status. \"primary\": Blue (sometimes dark blue); \"success\": Green; \"info\": Blue; \"warning\": Orange; \"danger\": Red; NULL: no background color\r\n                    solidHeader = TRUE, # Solid header\r\n                    collapsible = TRUE, # Collapsible box\r\n                    width = NULL, # Full width\r\n                    plotOutput(\"plot_chbRegion\", height = \"200px\"), # Region plot output\r\n                    tableOutput(\"table_region\") # Region table output\r\n                  )\r\n                )\r\n              ),\r\n              fluidRow(\r\n                column(\r\n                  width = 6,\r\n                  box(\r\n                    title = uiOutput(\"selected_chb_title\"), # CHB title output\r\n                    status = \"primary\", # Box status\r\n                    solidHeader = TRUE, # Solid header\r\n                    collapsible = TRUE, # Collapsible box\r\n                    width = NULL, # Full width\r\n                    plotOutput(\"plot_chdCHB\", height = \"200px\"), # CHB plot output\r\n                    tableOutput(\"table_chb\") # CHB table output\r\n                  )\r\n                ),\r\n                column(\r\n                  width = 6,\r\n                  box(\r\n                    title = uiOutput(\"selected_county_title\"), # County title output\r\n                    status = \"primary\", # Box status\r\n                    solidHeader = TRUE, # Solid header\r\n                    collapsible = TRUE, # Collapsible box\r\n                    width = NULL, # Full width\r\n                    plotOutput(\"plot_county\", height = \"200px\"), # County plot output\r\n                    tableOutput(\"table_county\") # County table output\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n}\r\n\r\n# Server Logic ----------------------------------------------------------------\r\nserver <- function(input, output, session) {\r\n  # Update the Select County of Interest dropdown based on the selected SCHSAC Region\r\n  observe({\r\n    region <- input$parGlobal_region\r\n    if (!is.null(region) && region != \"\") {\r\n      # Filter counties based on the selected SCHSAC Region\r\n      counties_in_region <- mn_region_raw |>\r\n        filter(Region == region) |>\r\n        pull(County)\r\n      updateSelectInput(session, \"parGlobal_county\", choices = sort(unique(counties_in_region)))\r\n    } else {\r\n      updateSelectInput(session, \"parGlobal_county\", choices = sort(unique(mn_region_raw$County)))\r\n    }\r\n  })\r\n  \r\n  observe({\r\n    updateSelectInput(session, \"parGlobal_chb\", choices = unique(chb_raw$CHBName)) # Update CHB input choices based on unique CHB names in the data\r\n  })\r\n  \r\n  output$region_narrative <- renderUI({\r\n    filtered_region <- mn_region_raw |> filter(County == input$parGlobal_county) # Filter region data based on the selected county\r\n    HTML(paste0(\"<b>\", unique(filtered_region$RegionName), \" Region<\/b> is made up of the following counties: \", paste(unique(filtered_region$County), collapse = \", \"), \".\")) # Generate region narrative text\r\n  })\r\n  \r\n  output$chb_narrative_01 <- renderUI({\r\n    filtered_chb <- chb_raw |> filter(County == input$parGlobal_county) # Filter CHB data based on the selected county\r\n    HTML(paste0(\"<b>\", unique(filtered_chb$CHBName), \" Community Health Board<\/b> includes: \", paste(unique(filtered_chb$County), collapse = \", \"), \".\")) # Generate CHB narrative text\r\n  })\r\n  \r\n  highlight_text <- function(text, keyword) {\r\n    gsub(keyword, paste0(\"<font color='red'>\", keyword, \"<\/font>\"), text) # Highlight the selected county in red\r\n  }\r\n  \r\n  output$region_counties <- renderUI({\r\n    selected_county <- input$parGlobal_county\r\n    regions <- mn_region_raw |>\r\n      group_by(Region) |>\r\n      summarise(Counties = paste(County, collapse = \", \")) # Group and summarize counties by region\r\n    \r\n    regions_text <- regions |>\r\n      mutate(Text = paste0(\"<b>\", Region, \" Region::<\/b> \", Counties)) |>\r\n      pull(Text) # Create region text\r\n    \r\n    regions_text <- sapply(regions_text, highlight_text, keyword = selected_county) # Highlight selected county\r\n    HTML(paste(regions_text, collapse = \"<br>\")) # Render HTML for regions and counties list\r\n  })\r\n  \r\n  output$chb_counties <- renderUI({\r\n    selected_county <- input$parGlobal_county\r\n    chbs <- chb_raw |>\r\n      group_by(CHB) |>\r\n      summarise(Counties = paste(County, collapse = \", \")) # Group and summarize counties by CHB\r\n    \r\n    chb_text <- chbs |>\r\n      mutate(Text = paste0(\"<b>\", CHB, \"::<\/b> \", Counties)) |>\r\n      pull(Text) # Create CHB text\r\n    \r\n    chb_text <- sapply(chb_text, highlight_text, keyword = selected_county) # Highlight selected county\r\n    HTML(paste(chb_text, collapse = \"<br>\")) # Render HTML for CHBs and counties list\r\n  })\r\n  \r\n  output$selected_county_title <- renderText({\r\n    HTML(paste(\"Coronary Heart Disease Exposure\", \"<br/>\", input$parGlobal_county, \"County\")) # Create the title for the selected county\r\n  })\r\n  \r\n  output$selected_region_title <- renderText({\r\n    county_region <- mn_region_raw |> filter(County == input$parGlobal_county) |> pull(Region) |> unique() # Get region for selected county\r\n    HTML(paste(\"Coronary Heart Disease Exposure\", \"<br/>\", county_region, \"Region\")) # Create the title for the selected region\r\n  })\r\n  \r\n  output$selected_state_title <- renderText({\r\n    HTML(paste(\"Coronary Heart Disease Exposure\", \"<br/>Minnesota\")) # Create the title for the state\r\n  })\r\n  \r\n  output$selected_chb_title <- renderText({\r\n    county_chb <- chb_raw |> filter(County == input$parGlobal_county) |> pull(CHB) |> unique() # Get CHB for selected county\r\n    HTML(paste(\"Coronary Heart Disease Exposure\", \"<br/>\", county_chb, \"CHB\")) # Create the title for the selected CHB\r\n  })\r\n  \r\n  # Reactive Data for plotting ------------------------------------------------\r\n  reactive_county_data <- reactive({\r\n    PopEst_CHDMN |>\r\n      filter(CTYNAME == input$parGlobal_county) |> # Filter data for selected county\r\n      aggregate_values(input$parGlobal_county, \"CTYNAME\") |> # Aggregate data for selected county\r\n      select(-CTYNAME) |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      ) |>\r\n      select(`Data Type`, `Low Confidence Limit`, `Point Estimate`, `High Confidence Limit`)\r\n  })\r\n  \r\n  reactive_region_data <- reactive({\r\n    county_region <- mn_region_raw |> filter(County == input$parGlobal_county) |> pull(Region) |> unique() # Get region for selected county\r\n    PopEst_CHDMN |>\r\n      filter(Region == county_region) |> # Filter data for selected region\r\n      aggregate_values(county_region, 'Region') |>\r\n      select(-Region) |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      ) |>\r\n      select(`Data Type`, `Low Confidence Limit`, `Point Estimate`, `High Confidence Limit`)\r\n  })\r\n  \r\n  reactive_chb_data <- reactive({\r\n    county_chb <- chb_raw |> filter(County == input$parGlobal_county) |> pull(CHB) |> unique() # Get CHB for selected county\r\n    PopEst_CHDMN |>\r\n      filter(CHB == county_chb) |> # Filter data for selected CHB\r\n      aggregate_values(county_chb, 'CHB') |>\r\n      select(-CHB) |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      ) |>\r\n      select(`Data Type`, `Low Confidence Limit`, `Point Estimate`, `High Confidence Limit`)\r\n  })\r\n  \r\n  # Compute y-axis limits\r\n  y_axis_limits <- reactive({\r\n    data_list <- list(\r\n      reactive_county_data(),\r\n      reactive_region_data(),\r\n      reactive_chb_data(),\r\n      mn_total |>\r\n        rename(\r\n          `Data Type` = Data_Value_Type,\r\n          `Point Estimate` = Aggregate_Data_Value,\r\n          `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n          `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n        )\r\n    )\r\n    compute_y_axis_limits(data_list) # Compute y-axis limits for all plots, handling NA values\r\n  })\r\n  \r\n  output$plot_county <- renderPlot({\r\n    chd_plot(reactive_county_data(), y_axis_limits()) # Render plot for the selected county with customized y-axis limits\r\n  })\r\n  \r\n  output$plot_chbRegion <- renderPlot({\r\n    chd_plot(reactive_region_data(), y_axis_limits()) # Render plot for the selected region with customized y-axis limits\r\n  })\r\n  \r\n  output$plot_chdCHB <- renderPlot({\r\n    chd_plot(reactive_chb_data(), y_axis_limits()) # Render plot for the selected CHB with customized y-axis limits\r\n  })\r\n  \r\n  output$plot_state <- renderPlot({\r\n    data <- mn_total |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      ) |>\r\n      select(`Data Type`, `Low Confidence Limit`, `Point Estimate`, `High Confidence Limit`)\r\n    chd_plot(data, y_axis_limits()) # Render plot for the state with customized y-axis limits\r\n  })\r\n  \r\n  # Summary Tables -----------------------------------------------------------\r\n  output$table_county <- renderTable({\r\n    reactive_county_data() # Render summary table for the selected county\r\n  })\r\n  \r\n  output$table_region <- renderTable({\r\n    reactive_region_data() # Render summary table for the selected region\r\n  })\r\n  \r\n  output$table_chb <- renderTable({\r\n    reactive_chb_data() # Render summary table for the selected CHB\r\n  })\r\n  \r\n  output$table_state <- renderTable({\r\n    mn_total |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      ) |>\r\n      select(`Data Type`, `Low Confidence Limit`, `Point Estimate`, `High Confidence Limit`) # Render summary table for the state with renamed columns\r\n  })\r\n  \r\n  # Narrative ----------------------------------------------------------------\r\n  output$narrative_text <- renderUI({\r\n    county_data <- reactive_county_data()\r\n    state_data <- mn_total |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      )\r\n    \r\n    region_data <- reactive_region_data()\r\n    chb_data <- reactive_chb_data()\r\n    \r\n    county <- input$parGlobal_county\r\n    comparison <- input$par_chdStateRegionChb\r\n    year <- \"2021\"\r\n    highlighted_year <- highlight_text(year, year)\r\n    highlighted_county <- highlight_text(county, county)\r\n    highlighted_age_adjusted_prevalence <- highlight_text(\"age-adjusted prevalence\", \"age-adjusted prevalence\")\r\n    highlighted_crude_prevalence <- highlight_text(\"crude prevalence\", \"crude prevalence\")\r\n    \r\n    age_adjusted_narrative <- NULL\r\n    crude_prevalence_narrative <- NULL\r\n    \r\n    if (comparison == \"All\") {\r\n      age_adjusted_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        state_data[state_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        \"state\", highlighted_year, highlighted_county, highlighted_age_adjusted_prevalence\r\n      )\r\n      age_adjusted_narrative <- paste0(age_adjusted_narrative, \" compared to the region's <b>\",\r\n                                       round(region_data$`Point Estimate`[region_data$`Data Type` == \"Age-adjusted prevalence\"], 2), \"% (95% CI: \", round(region_data$`Low Confidence Limit`[region_data$`Data Type` == \"Age-adjusted prevalence\"], 2), \"-\", round(region_data$`High Confidence Limit`[region_data$`Data Type` == \"Age-adjusted prevalence\"], 2), \")<\/b>, the CHB's <b>\",\r\n                                       round(chb_data$`Point Estimate`[chb_data$`Data Type` == \"Age-adjusted prevalence\"], 2), \"% (95% CI: \", round(chb_data$`Low Confidence Limit`[chb_data$`Data Type` == \"Age-adjusted prevalence\"], 2), \"-\", round(chb_data$`High Confidence Limit`[chb_data$`Data Type` == \"Age-adjusted prevalence\"], 2), \")<\/b>.\"\r\n      )\r\n      \r\n      crude_prevalence_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Crude prevalence\",],\r\n        state_data[state_data$`Data Type` == \"Crude prevalence\",],\r\n        \"state\", highlighted_year, highlighted_county, highlighted_crude_prevalence\r\n      )\r\n      crude_prevalence_narrative <- paste0(crude_prevalence_narrative, \" compared to the region's <b>\",\r\n                                           round(region_data$`Point Estimate`[region_data$`Data Type` == \"Crude prevalence\"], 2), \"% (95% CI: \", round(region_data$`Low Confidence Limit`[region_data$`Data Type` == \"Crude prevalence\"], 2), \"-\", round(region_data$`High Confidence Limit`[region_data$`Data Type` == \"Crude prevalence\"], 2), \")<\/b>, the CHB's <b>\",\r\n                                           round(chb_data$`Point Estimate`[chb_data$`Data Type` == \"Crude prevalence\"], 2), \"% (95% CI: \", round(chb_data$`Low Confidence Limit`[chb_data$`Data Type` == \"Crude prevalence\"], 2), \"-\", round(chb_data$`High Confidence Limit`[chb_data$`Data Type` == \"Crude prevalence\"], 2), \")<\/b>.\"\r\n      )\r\n    } else if (comparison == \"State\") {\r\n      age_adjusted_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        state_data[state_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        \"state\", highlighted_year, highlighted_county, highlighted_age_adjusted_prevalence\r\n      )\r\n      crude_prevalence_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Crude prevalence\",],\r\n        state_data[state_data$`Data Type` == \"Crude prevalence\",],\r\n        \"state\", highlighted_year, highlighted_county, highlighted_crude_prevalence\r\n      )\r\n    } else if (comparison == \"Region\") {\r\n      age_adjusted_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        region_data[region_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        \"region\", highlighted_year, highlighted_county, highlighted_age_adjusted_prevalence\r\n      )\r\n      crude_prevalence_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Crude prevalence\",],\r\n        region_data[region_data$`Data Type` == \"Crude prevalence\",],\r\n        \"region\", highlighted_year, highlighted_county, highlighted_crude_prevalence\r\n      )\r\n    } else if (comparison == \"CHB\") {\r\n      age_adjusted_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        chb_data[chb_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        \"CHB\", highlighted_year, highlighted_county, highlighted_age_adjusted_prevalence\r\n      )\r\n      crude_prevalence_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Crude prevalence\",],\r\n        chb_data[chb_data$`Data Type` == \"Crude prevalence\",],\r\n        \"CHB\", highlighted_year, highlighted_county, highlighted_crude_prevalence\r\n      )\r\n    }\r\n    \r\n    HTML(paste(age_adjusted_narrative, \"<br><br>\", crude_prevalence_narrative)) # Render the narrative text\r\n  })\r\n}\r\n\r\n# Run the app -----------------------------------------------------------------\r\nshinyApp(ui = ui, server = server) # Run the Shiny application ","type":"text"}]
