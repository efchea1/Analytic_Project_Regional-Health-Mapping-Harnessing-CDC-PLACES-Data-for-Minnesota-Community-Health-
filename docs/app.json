[{"name":"app.R","content":"# Shiny Dashboard -------------------------------------------------------------\r\n\r\n# Load necessary libraries \r\nlibrary(shiny)          # shiny for building interactive web applications\r\nlibrary(ggplot2)        # ggplot2 for creating graphs\r\nlibrary(dplyr)          # dplyr for data manipulation\r\nlibrary(shinydashboard) # shinydashboard for creating dashboard layouts in Shiny\r\nlibrary(shinyjs)        # shinyjs for enhancing Shiny apps with JavaScript\r\nlibrary(tidyr)          # tidyr for tidying data\r\nlibrary(maps)           # maps for mapping functions\r\nlibrary(plotly)         # plotly for interactive plots\r\n\r\n# Load Data from GitHub -------------------------------------------------------\r\n# Read census population estimates data from GitHub\r\nCensusEstMN <- read.csv('https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/CDC%20Places/2020%20to%202022%20Pop.%20Estimates/cc-est2022-agesex.csv')\r\n\r\n# List of URLs for CHD (Coronary Heart Disease) data files for multiple years\r\nCHD_files <- list(\r\n  'https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/CDC%20Places/Places%20CDC%20Estimates/CHD/CHD2018.csv',\r\n  'https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/CDC%20Places/Places%20CDC%20Estimates/CHD/CHD2019.csv',\r\n  'https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/CDC%20Places/Places%20CDC%20Estimates/CHD/CHD2020.csv',\r\n  'https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/CDC%20Places/Places%20CDC%20Estimates/CHD/CHD2021.csv'\r\n)\r\n\r\n# Load CHD data from the URLs\r\nCHD_data <- lapply(CHD_files, read.csv)\r\n\r\n# Load raw data for Community Health Board (CHB) and MN Region\r\nchb_raw <- read.csv('https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/MN%20SCHSAC%20%26%20CHB%20Regions/Community%20Health%20Board%20as%20of%201_17_2024.csv')\r\nmn_region_raw <- read.csv('https://raw.githubusercontent.com/quincountychsmn/Public-Data-Sources/main/MN%20SCHSAC%20%26%20CHB%20Regions/State%20Community%20Health%20Services%20Advisory%20Committee%20as%20of%201_17_2024.csv')\r\n\r\n# Data Wrangling --------------------------------------------------------------\r\n# Clean and prepare CHD data\r\nCHD_data <- lapply(CHD_data, function(df) {\r\n  # Add LocationID column if Latitude is present in the dataset\r\n  df$LocationID <- ifelse(\"Latitude\" %in% colnames(df), as.character(df$Latitude), NA)\r\n  # Correct any misspelled column names\r\n  colnames(df)[colnames(df) == 'Geolocatioin'] <- 'Geolocation'\r\n  df\r\n})\r\n\r\n# Combine all CHD data into one data frame\r\nCHD_Final <- bind_rows(CHD_data)\r\n\r\n# Standardize County Names\r\nCHD_Final$LocationName <- toupper(CHD_Final$LocationName)\r\nmn_region_raw$County <- toupper(mn_region_raw$County)\r\nchb_raw$County <- toupper(chb_raw$County)\r\nCensusEstMN$CTYNAME <- toupper(gsub(\" County\", \"\", CensusEstMN$CTYNAME))\r\n\r\n# Select relevant data and merge with region and CHB data\r\nSelected_Locations <- CHD_Final |>\r\n  filter(Year == 2021, StateAbbr == \"MN\") |>\r\n  left_join(mn_region_raw, by = c(\"LocationName\" = \"County\")) |>\r\n  left_join(chb_raw, by = c(\"LocationName\" = \"County\"))\r\n\r\n# Filter and select specific columns for population estimates and CHD data\r\nPopEst_CHDMN <- CensusEstMN |>\r\n  filter(YEAR == 3) |>\r\n  inner_join(Selected_Locations, by = c(\"CTYNAME\" = \"LocationName\")) |>\r\n  select(CTYNAME, Data_Value_Type, AGE18PLUS_TOT, Measure, Data_Value, High_Confidence_Limit, Low_Confidence_Limit, Region, CHB)\r\n\r\n# Function to calculate aggregate values---------------------------------------\r\n# Define a function to calculate aggregate values for a given dataframe, user input, and filter criterion\r\naggregate_values <- function(df, userInput, filterBy) {\r\n  df |>\r\n    filter(!!sym(filterBy) == userInput) |>\r\n    mutate(\r\n      Aggregate_Data_Value = Data_Value * AGE18PLUS_TOT / 100,\r\n      Aggregate_Low_Confidence_Limit = Low_Confidence_Limit * AGE18PLUS_TOT / 100,\r\n      Aggregate_High_Confidence_Limit = High_Confidence_Limit * AGE18PLUS_TOT / 100\r\n    ) |>\r\n    group_by(across(all_of(filterBy)), Data_Value_Type) |>\r\n    summarise(\r\n      Aggregate_Data_Value = sum(Aggregate_Data_Value) / sum(AGE18PLUS_TOT) * 100,\r\n      Aggregate_Low_Confidence_Limit = sum(Aggregate_Low_Confidence_Limit) / sum(AGE18PLUS_TOT) * 100,\r\n      Aggregate_High_Confidence_Limit = sum(Aggregate_High_Confidence_Limit) / sum(AGE18PLUS_TOT) * 100,\r\n      .groups = 'drop'\r\n    )\r\n}\r\n\r\n# Pre-calculate Minnesota total------------------------------------------------\r\n# Calculate aggregate values for Minnesota\r\nmn_total <- PopEst_CHDMN |>\r\n  mutate(StateAbbr = \"MN\") |>\r\n  aggregate_values(\"MN\", 'StateAbbr') |>\r\n  mutate(across(everything(), ~tidyr::replace_na(., 0)))\r\n\r\n# Function to compute y-axis limits -------------------------------------------\r\n# Define a function to compute y-axis limits for given data list\r\ncompute_y_axis_limits <- function(data_list) {\r\n  min_value <- min(sapply(data_list, function(df) min(df$`Low Confidence Limit`, na.rm = TRUE)))\r\n  max_value <- max(sapply(data_list, function(df) max(df$`High Confidence Limit`, na.rm = TRUE)))\r\n  c(min_value, max_value)\r\n}\r\n\r\n# Function to create ggplot graph ---------------------------------------------\r\n# Define a function to create ggplot graph with given data and y-axis limits\r\nchd_plot <- function(data, y_limits) {\r\n  ggplot(data, aes(x = `Data Type`, y = `Point Estimate`, color = `Data Type`)) +\r\n    geom_errorbar(aes(ymin = `Low Confidence Limit`, ymax = `High Confidence Limit`), width = 0.2) +\r\n    geom_point() +\r\n    ylim(y_limits) +\r\n    theme_minimal() +\r\n    theme(\r\n      axis.title.y = element_blank(),\r\n      axis.text.x = element_blank(),\r\n      axis.title.x = element_blank(),\r\n      axis.line = element_blank(),\r\n      legend.text = element_text(size = 12)\r\n    )\r\n}\r\n\r\n# Function to generate narrative text -----------------------------------------\r\n# Define a function to generate narrative text based on comparison data and highlighted elements\r\ngenerate_narrative <- function(county_data, comparison_data, comparison_name, highlighted_year, highlighted_county, data_type) {\r\n  narrative <- paste0(\r\n    \"In \", highlighted_year, \", <b>adults aged â‰¥18 years<\/b> in \", highlighted_county, \" had a <b>coronary heart disease<\/b> \",\r\n    data_type, \" of <b>\", round(county_data$`Point Estimate`, 2), \"% (95% CI: \", round(county_data$`Low Confidence Limit`, 2), \"-\",\r\n    round(county_data$`High Confidence Limit`, 2), \")<\/b>, compared to the \", comparison_name, \"'s <b>\",\r\n    round(comparison_data$`Point Estimate`, 2), \"% (95% CI: \", round(comparison_data$`Low Confidence Limit`, 2), \"-\",\r\n    round(comparison_data$`High Confidence Limit`, 2), \")<\/b>.\"\r\n  )\r\n  \r\n  if (county_data$`Low Confidence Limit` > comparison_data$`High Confidence Limit` || county_data$`High Confidence Limit` < comparison_data$`Low Confidence Limit`) {\r\n    if (county_data$`Point Estimate` < comparison_data$`Low Confidence Limit`) {\r\n      narrative <- paste0(narrative, \" The confidence limits (low & high) values is <b>lower<\/b> than the \", comparison_name, \".\")\r\n    } else {\r\n      narrative <- paste0(narrative, \" The confidence limits values <b>higher<\/b> than the \", comparison_name, \".\")\r\n    } \r\n  } else {\r\n    narrative <- paste0(narrative, \" The difference in the CI values is <b>not statistically significant<\/b>.\")\r\n  }\r\n  \r\n  narrative\r\n}\r\n\r\n# Define UI -------------------------------------------------------------------\r\n# Define the user interface (UI) for the Shiny dashboard\r\nui <- function(request) {\r\n  dashboardPage(\r\n    dashboardHeader(title = \"CDC Places to MN Regions\", titleWidth = 400), # Create dashboard header with title\r\n    dashboardSidebar(\r\n      width = 350,\r\n      selectInput(\"parGlobal_region\", label = \"Select SCHSAC Region of Interest\", choices = sort(unique(mn_region_raw$Region)), selected = NULL, width = 350), # Dropdown for selecting SCHSAC region\r\n      selectInput(\"parGlobal_county\", label = \"Select County of Interest\", choices = sort(unique(mn_region_raw$County)), selected = NULL, width = 350), # Dropdown for selecting county\r\n      selectInput(\"parGlobal_chdYear\", label = \"Select Year\", choices = sort(unique(Selected_Locations$Year), decreasing = TRUE), selected = max(unique(Selected_Locations$Year)), width = 350), # Dropdown for selecting year\r\n      selectInput(\"par_chdStateRegionChb\", label = \"Select Comparison\", choices = c(\"State\", \"Region\", \"CHB\"), selected = \"State\", multiple = FALSE, width = 350), # Dropdown for selecting year\r\n      sidebarMenu(\r\n        menuItem(\"Home\", tabName = \"tn_homePage\"), # Menu item for Home page\r\n        menuItem(\"Region & CHB Definition\", tabName = \"tn_regionChbDefinitions\"),\r\n        menuItem(\"Coronary Heart Disease\", tabName = \"tn_coronaryHeartDisease\")\r\n      )\r\n    ),\r\n    dashboardBody(\r\n      shinyjs::useShinyjs(), # Javascript\r\n      tabItems(\r\n        tabItem(\r\n          tabName = \"tn_homePage\",\r\n          tabsetPanel(\r\n            tabPanel(\r\n              \"Home Page\",\r\n              fluidRow(\r\n                column(\r\n                  width = 12,\r\n                  h1(\"Welcome to the CDC PLACES MN Region Dashboard\"), # Display welcome message\r\n                  h4(tags$b(\"Objective:\"), \"Use CDC PLACES methodology to create MN Regions ShinyLive dashboard for health indicators.\", tags$a(href=\"https://www.cdc.gov/places/faqs/using-data/index.html\", \"Link to CDC PLACES methodology to calculate the aggregate values.\", target=\"_blank\")), # Link to external site\r\n                  tags$h4(tags$b(\"Why this project?\"), \"Before the CDC Places project, the CDC Behavioral Risk Factor Surveillance System BRFSS, allowed for state projected healthcare indicators. This process was not able to be applied to the county level. Now, with CDC Places counties can view some projected healthcare indicators. However, currently the CDC Places project does not show in an easy format aggregate county regions. By doing this project, I am not only going to help Quin County CHS, but other county regions in the state of Minnesota or even the United States.\"), # Description of the project\r\n                  tags$h3(\"Those involved with this project are:\"), # Project participants\r\n                  tags$h4(tags$b(\"Emmanuel Fle Chea\"), \", MPH, Public Health Data Science, University of Minnesota School of Public Health\"), # Participant 1\r\n                  tags$h4(tags$b(\"Mr. Patrick Olson\"), \" (Preceptor), Quin County Community Health Board, Community Resource Liaison/Associate/Researcher\") # Participant 2\r\n                )\r\n              )\r\n            )\r\n          )\r\n        ),\r\n        tabItem(\r\n          tabName = \"tn_regionChbDefinitions\",\r\n          tabsetPanel(\r\n            tabPanel(\r\n              \"Region/CHB\",\r\n              fluidRow(\r\n                column(\r\n                  width = 12,\r\n                  h3(HTML(\"Updating the Select County of Interest filter will highlight the county in <font color=red>red<\/font> while the Regions and Community Health Boards will remain in <b>bold<\/b>.\")), # Explanation of functionality\r\n                  h3(\"For this tab, the Select SCHSAC Region and Select Community Health Board filters are greyed out because they do not execute any function on this tab.\"), # Note on disabled filters\r\n                  h3(\"The purpose for this tab is to provide a quick reference for what counties fall under which region and Community Health Board.\") # Purpose of the tab\r\n                )\r\n              ),\r\n              fluidRow(\r\n                column(\r\n                  width = 4,\r\n                  box(\r\n                    title = \"Minnesota Region Map\",\r\n                    status = \"primary\",\r\n                    solidHeader = TRUE,\r\n                    collapsible = TRUE,\r\n                    width = NULL,\r\n                    plotlyOutput(\"mn_region_map\", height = \"500px\")\r\n                  )\r\n                ),\r\n                column(\r\n                  width = 4,\r\n                  box(\r\n                    title = \"Minnesota CHB Map\",\r\n                    status = \"primary\",\r\n                    solidHeader = TRUE,\r\n                    collapsible = TRUE,\r\n                    width = NULL,\r\n                    plotlyOutput(\"mn_chb_map\", height = \"500px\")\r\n                  )\r\n                ),\r\n                column(\r\n                  width = 4,\r\n                  box(\r\n                    title = \"Minnesota County Map\",\r\n                    status = \"primary\",\r\n                    solidHeader = TRUE,\r\n                    collapsible = TRUE,\r\n                    width = NULL,\r\n                    plotlyOutput(\"mn_map\", height = \"500px\")\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          )\r\n        ),\r\n        tabItem(\r\n          tabName = \"tn_coronaryHeartDisease\",\r\n          tabsetPanel(\r\n            id = \"tpId_coronaryHeartDisease\",\r\n            tabPanel(\r\n              \"Adults>=18 CHD Exposure\",\r\n              fluidRow(\r\n                column(\r\n                  width = 12,\r\n                  uiOutput(\"narrative_text\", style = \"font-size: 16px;\")\r\n                )\r\n              ),\r\n              fluidRow(\r\n                column(\r\n                  width = 6,\r\n                  box(\r\n                    title = uiOutput(\"selected_state_title\"),\r\n                    status = \"primary\",\r\n                    solidHeader = TRUE,\r\n                    collapsible = TRUE,\r\n                    width = NULL,\r\n                    plotOutput(\"plot_state\", height = \"200px\"),\r\n                    tableOutput(\"table_state\")\r\n                  )\r\n                ),\r\n                column(\r\n                  width = 6,\r\n                  box(\r\n                    title = uiOutput(\"selected_region_title\"),\r\n                    status = \"primary\",\r\n                    solidHeader = TRUE,\r\n                    collapsible = TRUE,\r\n                    width = NULL,\r\n                    plotOutput(\"plot_chbRegion\", height = \"200px\"),\r\n                    tableOutput(\"table_region\")\r\n                  )\r\n                )\r\n              ),\r\n              fluidRow(\r\n                column(\r\n                  width = 6,\r\n                  box(\r\n                    title = uiOutput(\"selected_chb_title\"),\r\n                    status = \"primary\",\r\n                    solidHeader = TRUE,\r\n                    collapsible = TRUE,\r\n                    width = NULL,\r\n                    plotOutput(\"plot_chdCHB\", height = \"200px\"),\r\n                    tableOutput(\"table_chb\")\r\n                  )\r\n                ),\r\n                column(\r\n                  width = 6,\r\n                  box(\r\n                    title = uiOutput(\"selected_county_title\"),\r\n                    status = \"primary\",\r\n                    solidHeader = TRUE,\r\n                    collapsible = TRUE,\r\n                    width = NULL,\r\n                    plotOutput(\"plot_county\", height = \"200px\"),\r\n                    tableOutput(\"table_county\")\r\n                  )\r\n                )\r\n              ),\r\n              fluidRow(\r\n                column(\r\n                  width = 12,\r\n                  selectInput(\"parLocal_prevalence\", label = \"Select Prevalence\", choices = c(\"Age-adjusted prevalence\", \"Crude prevalence\"), selected = \"Age-adjusted prevalence\", width = 350)\r\n                ),\r\n                column(\r\n                  width = 12,\r\n                  box(\r\n                    title = \"Minnesota CHD Exposure Map\",\r\n                    status = \"primary\",\r\n                    solidHeader = TRUE,\r\n                    collapsible = TRUE,\r\n                    width = NULL,\r\n                    plotlyOutput(\"mn_adults_chd_exposure_map\", height = \"500px\")\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n}\r\n\r\n# Server Logic ----------------------------------------------------------------\r\n# Define the server logic for the Shiny dashboard\r\nserver <- function(input, output, session) {\r\n  # Observe the selected region and update county choices accordingly\r\n  observe({\r\n    region <- input$parGlobal_region\r\n    if (!is.null(region) && region != \"\") {\r\n      counties_in_region <- mn_region_raw |>\r\n        filter(Region == region) |>\r\n        pull(County)\r\n      updateSelectInput(session, \"parGlobal_county\", choices = sort(unique(counties_in_region)))\r\n    } else {\r\n      updateSelectInput(session, \"parGlobal_county\", choices = sort(unique(mn_region_raw$County)))\r\n    }\r\n  })\r\n  \r\n  # Update CHB choices based on selected county\r\n  observe({\r\n    updateSelectInput(session, \"parGlobal_chb\", choices = unique(chb_raw$CHBName))\r\n  })\r\n  \r\n  # Render narrative for the selected region\r\n  output$region_narrative <- renderUI({\r\n    filtered_region <- mn_region_raw |> filter(County == input$parGlobal_county)\r\n    region_vector <- unique(filtered_region$Region)\r\n    HTML(paste0(\"<b>\", region_vector, \" Region<\/b> is made up of the following counties: \", paste(unique(filtered_region$County), collapse = \", \"), \".\"))\r\n  })\r\n  \r\n  # Render narrative for the selected CHB\r\n  output$chb_narrative_01 <- renderUI({\r\n    filtered_chb <- chb_raw |> filter(County == input$parGlobal_county)\r\n    chb_name_vector <- unique(filtered_chb$CHBName)\r\n    HTML(paste0(\"<b>\", chb_name_vector, \" Community Health Board<\/b> includes: \", paste(unique(filtered_chb$County), collapse = \", \"), \".\"))\r\n  })\r\n  \r\n  # Highlight text in narrative\r\n  highlight_text <- function(text, keyword) {\r\n    gsub(keyword, paste0(\"<font color='red'>\", keyword, \"<\/font>\"), text)\r\n  }\r\n  \r\n  # Render counties in the selected region with highlighting\r\n  output$region_counties <- renderUI({\r\n    selected_county <- input$parGlobal_county\r\n    regions <- mn_region_raw |>\r\n      group_by(Region) |>\r\n      summarise(Counties = paste(County, collapse = \", \"))\r\n    \r\n    regions_text <- regions |>\r\n      mutate(Text = paste0(\"<b>\", Region, \" Region::<\/b> \", Counties)) |>\r\n      pull(Text)\r\n    \r\n    regions_text <- sapply(regions_text, highlight_text, keyword = selected_county)\r\n    HTML(paste(regions_text, collapse = \"<br>\"))\r\n  })\r\n  \r\n  # Render counties in the selected CHB with highlighting\r\n  output$chb_counties <- renderUI({\r\n    selected_county <- input$parGlobal_county\r\n    chbs <- chb_raw |>\r\n      group_by(CHB) |>\r\n      summarise(Counties = paste(County, collapse = \", \"))\r\n    \r\n    chb_text <- chbs |>\r\n      mutate(Text = paste0(\"<b>\", CHB, \"::<\/b> \", Counties)) |>\r\n      pull(Text)\r\n    \r\n    chb_text <- sapply(chb_text, highlight_text, keyword = selected_county)\r\n    HTML(paste(chb_text, collapse = \"<br>\"))\r\n  })\r\n  \r\n  # Render titles for selected county, region, state, and CHB\r\n  output$selected_county_title <- renderText({\r\n    HTML(paste(\"Coronary Heart Disease Exposure\", \"<br/>\", input$parGlobal_county, \"County\"))\r\n  })\r\n  \r\n  output$selected_region_title <- renderText({\r\n    county_region <- mn_region_raw |> filter(County == input$parGlobal_county) |> pull(Region) |> unique()\r\n    HTML(paste(\"Coronary Heart Disease Exposure\", \"<br/>\", county_region, \"Region\"))\r\n  })\r\n  \r\n  output$selected_state_title <- renderText({\r\n    HTML(paste(\"Coronary Heart Disease Exposure\", \"<br/>Minnesota\"))\r\n  })\r\n  \r\n  output$selected_chb_title <- renderText({\r\n    county_chb <- chb_raw |> filter(County == input$parGlobal_county) |> pull(CHB) |> unique()\r\n    HTML(paste(\"Coronary Heart Disease Exposure\", \"<br/>\", county_chb, \"CHB\"))\r\n  })\r\n  \r\n  # Reactive Data for plotting ------------------------------------------------\r\n  # Define reactive data for the selected county\r\n  reactive_county_data <- reactive({\r\n    PopEst_CHDMN |>\r\n      filter(CTYNAME == input$parGlobal_county) |>\r\n      aggregate_values(input$parGlobal_county, \"CTYNAME\") |>\r\n      select(-CTYNAME) |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      ) |>\r\n      select(`Data Type`, `Low Confidence Limit`, `Point Estimate`, `High Confidence Limit`)\r\n  })\r\n  \r\n  # Define reactive data for the selected region\r\n  reactive_region_data <- reactive({\r\n    county_region <- mn_region_raw |> filter(County == input$parGlobal_county) |> pull(Region) |> unique()\r\n    PopEst_CHDMN |>\r\n      filter(Region %in% county_region) |>\r\n      aggregate_values(county_region, 'Region') |>\r\n      select(-Region) |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      ) |>\r\n      select(`Data Type`, `Low Confidence Limit`, `Point Estimate`, `High Confidence Limit`)\r\n  })\r\n  \r\n  # Define reactive data for the selected CHB\r\n  reactive_chb_data <- reactive({\r\n    county_chb <- chb_raw |> filter(County == input$parGlobal_county) |> pull(CHB) |> unique()\r\n    PopEst_CHDMN |>\r\n      filter(CHB %in% county_chb) |>\r\n      aggregate_values(county_chb, 'CHB') |>\r\n      select(-CHB) |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      ) |>\r\n      select(`Data Type`, `Low Confidence Limit`, `Point Estimate`, `High Confidence Limit`)\r\n  })\r\n  \r\n  # Compute y-axis limits based on reactive data\r\n  y_axis_limits <- reactive({\r\n    data_list <- list(\r\n      reactive_county_data(),\r\n      reactive_region_data(),\r\n      reactive_chb_data(),\r\n      mn_total |>\r\n        rename(\r\n          `Data Type` = Data_Value_Type,\r\n          `Point Estimate` = Aggregate_Data_Value,\r\n          `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n          `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n        )\r\n    )\r\n    compute_y_axis_limits(data_list)\r\n  })\r\n  \r\n  # Render plot for the selected county\r\n  output$plot_county <- renderPlot({\r\n    chd_plot(reactive_county_data(), y_axis_limits())\r\n  })\r\n  \r\n  # Render plot for the selected region\r\n  output$plot_chbRegion <- renderPlot({\r\n    chd_plot(reactive_region_data(), y_axis_limits())\r\n  })\r\n  \r\n  # Render plot for the selected CHB\r\n  output$plot_chdCHB <- renderPlot({\r\n    chd_plot(reactive_chb_data(), y_axis_limits())\r\n  })\r\n  \r\n  # Render plot for the state of Minnesota\r\n  output$plot_state <- renderPlot({\r\n    data <- mn_total |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      ) |>\r\n      select(`Data Type`, `Low Confidence Limit`, `Point Estimate`, `High Confidence Limit`)\r\n    chd_plot(data, y_axis_limits())\r\n  })\r\n  \r\n  # Summary Tables -----------------------------------------------------------\r\n  # Render summary table for the selected county\r\n  output$table_county <- renderTable({\r\n    reactive_county_data()\r\n  })\r\n  \r\n  # Render summary table for the selected region\r\n  output$table_region <- renderTable({\r\n    reactive_region_data()\r\n  })\r\n  \r\n  # Render summary table for the selected CHB\r\n  output$table_chb <- renderTable({\r\n    reactive_chb_data()\r\n  })\r\n  \r\n  # Render summary table for the state of Minnesota\r\n  output$table_state <- renderTable({\r\n    mn_total |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      ) |>\r\n      select(`Data Type`, `Low Confidence Limit`, `Point Estimate`, `High Confidence Limit`)\r\n  })\r\n  \r\n  # Narrative ----------------------------------------------------------------\r\n  # Render narrative text based on selected inputs\r\n  output$narrative_text <- renderUI({\r\n    county_data <- reactive_county_data()\r\n    state_data <- mn_total |>\r\n      rename(\r\n        `Data Type` = Data_Value_Type,\r\n        `Point Estimate` = Aggregate_Data_Value,\r\n        `Low Confidence Limit` = Aggregate_Low_Confidence_Limit,\r\n        `High Confidence Limit` = Aggregate_High_Confidence_Limit\r\n      )\r\n    \r\n    region_data <- reactive_region_data()\r\n    chb_data <- reactive_chb_data()\r\n    \r\n    county <- input$parGlobal_county\r\n    comparison <- input$par_chdStateRegionChb\r\n    year <- \"2021\"\r\n    highlighted_year <- highlight_text(year, year)\r\n    highlighted_county <- highlight_text(county, county)\r\n    highlighted_age_adjusted_prevalence <- highlight_text(\"age-adjusted prevalence\", \"age-adjusted prevalence\")\r\n    highlighted_crude_prevalence <- highlight_text(\"crude prevalence\", \"crude prevalence\")\r\n    \r\n    age_adjusted_narrative <- NULL\r\n    crude_prevalence_narrative <- NULL\r\n    \r\n    if (comparison == \"State\") {\r\n      age_adjusted_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        state_data[state_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        \"state\", highlighted_year, highlighted_county, highlighted_age_adjusted_prevalence\r\n      )\r\n      crude_prevalence_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Crude prevalence\",],\r\n        state_data[state_data$`Data Type` == \"Crude prevalence\",],\r\n        \"state\", highlighted_year, highlighted_county, highlighted_crude_prevalence\r\n      )\r\n    } else if (comparison == \"Region\") {\r\n      age_adjusted_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        region_data[region_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        \"region\", highlighted_year, highlighted_county, highlighted_age_adjusted_prevalence\r\n      )\r\n      crude_prevalence_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Crude prevalence\",],\r\n        region_data[region_data$`Data Type` == \"Crude prevalence\",],\r\n        \"region\", highlighted_year, highlighted_county, highlighted_crude_prevalence\r\n      )\r\n    } else if (comparison == \"CHB\") {\r\n      age_adjusted_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        chb_data[chb_data$`Data Type` == \"Age-adjusted prevalence\",],\r\n        \"CHB\", highlighted_year, highlighted_county, highlighted_age_adjusted_prevalence\r\n      )\r\n      crude_prevalence_narrative <- generate_narrative(\r\n        county_data[county_data$`Data Type` == \"Crude prevalence\",],\r\n        chb_data[chb_data$`Data Type` == \"Crude prevalence\",],\r\n        \"CHB\", highlighted_year, highlighted_county, highlighted_crude_prevalence\r\n      )\r\n    }\r\n    \r\n    HTML(paste(age_adjusted_narrative, \"<br><br>\", crude_prevalence_narrative))\r\n  })\r\n  \r\n  # Render Plotly Map ---------------------------------------------------------\r\n  # Render plotly map for the state of Minnesota highlighting selected county\r\n  output$mn_map <- renderPlotly({\r\n    selected_county <- input$parGlobal_county\r\n    \r\n    mn_map_data <- map_data(\"county\", region = \"minnesota\")\r\n    mn_map_data$subregion <- toupper(mn_map_data$subregion)\r\n    \r\n    selected_county_data <- mn_map_data |>\r\n      filter(subregion == toupper(selected_county))\r\n    \r\n    county_region <- mn_region_raw |>\r\n      filter(County == selected_county) |>\r\n      pull(Region)\r\n    county_chb <- chb_raw |>\r\n      filter(County == selected_county) |>\r\n      pull(CHB)\r\n    \r\n    plot <- ggplot(mn_map_data, aes(x = long, y = lat, group = group)) +\r\n      geom_polygon(fill = \"#78BE21\", color = \"white\") +\r\n      geom_polygon(data = selected_county_data, fill = \"#003865\", color = \"white\") +\r\n      coord_fixed(1.3) +\r\n      theme_void() +\r\n      theme(legend.position = \"none\")\r\n    \r\n    ggplotly(plot) |>\r\n      layout(hoverlabel = list(bgcolor = \"white\", bordercolor = \"black\", font = list(color = \"black\"))) |>\r\n      style(\r\n        hoverinfo = \"text\",\r\n        text = paste(\r\n          \"State: Minnesota\",\r\n          \"<br>Region:\", county_region,\r\n          \"<br>CHB:\", county_chb,\r\n          \"<br>County:\", selected_county\r\n        ),\r\n        hoveron = \"fills\"\r\n      )\r\n  })\r\n  \r\n  # Render Plotly Region Map ---------------------------------------------------------\r\n  output$mn_region_map <- renderPlotly({\r\n    selected_county <- input$parGlobal_county\r\n    selected_region <- input$parGlobal_region\r\n    \r\n    mn_map_data <- map_data(\"county\", region = \"minnesota\")\r\n    mn_map_data$subregion <- toupper(mn_map_data$subregion)\r\n    \r\n    mn_map_data <- mn_map_data |>\r\n      left_join(mn_region_raw, by = c(\"subregion\" = \"County\"))\r\n    \r\n    counties_in_region <- mn_region_raw |>\r\n      filter(Region == selected_region) |>\r\n      pull(County) |>\r\n      toupper()\r\n    \r\n    region_map_data <- mn_map_data |>\r\n      filter(subregion %in% counties_in_region)\r\n    \r\n    selected_county_data <- mn_map_data |>\r\n      filter(subregion == toupper(selected_county))\r\n    \r\n    plot <- ggplot(mn_map_data, aes(x = long, y = lat, group = group)) +\r\n      geom_polygon(fill = \"#78BE21\", color = \"white\") +\r\n      geom_polygon(data = region_map_data, fill = \"blue\", color = \"white\") +\r\n      geom_polygon(data = selected_county_data, fill = \"#003865\", color = \"white\") +\r\n      coord_fixed(1.3) +\r\n      theme_void() +\r\n      theme(legend.position = \"none\")\r\n    \r\n    ggplotly(plot) |>\r\n      layout(hoverlabel = list(bgcolor = \"white\", bordercolor = \"black\", font = list(color = \"black\"))) |>\r\n      style(\r\n        hoverinfo = \"text\",\r\n        text = ~paste(\r\n          \"State: Minnesota\",\r\n          \"<br>Region:\", selected_region,\r\n          \"<br>County:\", subregion\r\n        ),\r\n        hoveron = \"fills\"\r\n      )\r\n  })\r\n  \r\n  # Render Plotly CHB Map ---------------------------------------------------------\r\n  output$mn_chb_map <- renderPlotly({\r\n    selected_county <- input$parGlobal_county\r\n    \r\n    mn_map_data <- map_data(\"county\", region = \"minnesota\")\r\n    mn_map_data$subregion <- toupper(mn_map_data$subregion)\r\n    \r\n    mn_map_data <- mn_map_data |>\r\n      left_join(chb_raw, by = c(\"subregion\" = \"County\"))\r\n    \r\n    county_chb <- chb_raw |>\r\n      filter(County == selected_county) |>\r\n      pull(CHB)\r\n    \r\n    counties_in_chb <- chb_raw |>\r\n      filter(CHB == county_chb) |>\r\n      pull(County) |>\r\n      toupper()\r\n    \r\n    chb_map_data <- mn_map_data |>\r\n      filter(subregion %in% counties_in_chb)\r\n    \r\n    selected_county_data <- mn_map_data |>\r\n      filter(subregion == toupper(selected_county))\r\n    \r\n    plot <- ggplot(mn_map_data, aes(x = long, y = lat, group = group)) +\r\n      geom_polygon(fill = \"#78BE21\", color = \"white\") +\r\n      geom_polygon(data = chb_map_data, aes(fill = subregion), color = \"white\") +\r\n      geom_polygon(data = selected_county_data, fill = \"#003865\", color = \"white\") +\r\n      coord_fixed(1.3) +\r\n      theme_void() +\r\n      theme(legend.position = \"none\")\r\n    \r\n    ggplotly(plot) |>\r\n      layout(hoverlabel = list(bgcolor = \"white\", bordercolor = \"black\", font = list(color = \"black\"))) |>\r\n      style(\r\n        hoverinfo = \"text\",\r\n        text = ~paste(\r\n          \"State: Minnesota\",\r\n          \"<br>CHB:\", county_chb,\r\n          \"<br>County:\", subregion\r\n        ),\r\n        hoveron = \"fills\"\r\n      )\r\n  })\r\n  \r\n  # Render Plotly CHD Exposure Map ---------------------------------------------------------\r\n  output$mn_adults_chd_exposure_map <- renderPlotly({\r\n    selected_prevalence <- input$parLocal_prevalence\r\n    \r\n    exposure_data <- Selected_Locations |>\r\n      filter(Data_Value_Type == selected_prevalence) |>\r\n      mutate(LocationName = ifelse(LocationName == \"ST. LOUIS\", \"ST LOUIS\", LocationName)) |>\r\n      select(LocationName, Data_Value, Region, CHB, Low_Confidence_Limit, High_Confidence_Limit) |>\r\n      rename(`County` = LocationName,\r\n             `Point Estimate` = Data_Value,\r\n             `Low Confidence Limit` = Low_Confidence_Limit,\r\n             `High Confidence Limit` = High_Confidence_Limit) |> \r\n      mutate(\r\n        is_hotspot = ifelse(`Point Estimate` < 0.74 | `Point Estimate` < 7.4, \"No (Prevalence < 7.4%)\", \"Yes (Prevalence > 7.3%)\"),\r\n        `County` = toupper(`County`)\r\n      )\r\n    \r\n    mn_map_data <- map_data(\"county\", region = \"minnesota\")\r\n    mn_map_data$subregion <- toupper(mn_map_data$subregion)\r\n    \r\n    map_data <- merge(mn_map_data, exposure_data, by.x = \"subregion\", by.y = \"County\", all.x = TRUE) |> \r\n      arrange(order)\r\n    \r\n    plot <- ggplot(map_data, aes(x = long, y = lat, group = group, fill = `Point Estimate`, text = paste(\r\n      \"State: Minnesota\",\r\n      \"<br>Region:\", Region,\r\n      \"<br>CHB:\", CHB,\r\n      \"<br>County:\", subregion,\r\n      \"<br>\", selected_prevalence, \":\", round(`Point Estimate`, 2), \"%\",\r\n      \"<br>95% CI:\", round(`Low Confidence Limit`, 2), \"-\", round(`High Confidence Limit`, 2),\r\n      \"<br>Hotspot:\", is_hotspot\r\n    ))) +\r\n      geom_polygon(color = \"black\") +\r\n      scale_fill_gradient(low = \"#78BE21\", high = \"#003865\", na.value = \"grey50\") +\r\n      theme_void() +\r\n      theme(legend.position = \"right\") +\r\n      labs(fill = paste(selected_prevalence, \"(%)\"))\r\n    \r\n    ggplotly(plot, tooltip = \"text\") |>\r\n      layout(hoverlabel = list(bgcolor = \"white\", bordercolor = \"black\", font = list(color = \"black\")))\r\n  })\r\n  \r\n  # Bookmarking -----------------------------------------------------------------\r\n  # the next 8 lines are from https://mastering-shiny.org/action-bookmark.html as well as enableBookmarking in the shinyApp function\r\n  # Automatically bookmark every time an input changes\r\n  observe({\r\n    reactiveValuesToList(input)\r\n    session$doBookmark()\r\n  })\r\n  # Update the query string\r\n  onBookmarked(updateQueryString)\r\n}\r\n\r\n# Create Shiny app\r\nshinyApp(ui = ui, server = server) # Run the Shiny application ","type":"text"}]
